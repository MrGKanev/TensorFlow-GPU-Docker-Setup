# Use the official TensorFlow GPU image with a specific version 
FROM tensorflow/tensorflow:2.11.0-gpu-jupyter

# Set image metadata
LABEL name="tensorflow-gpu-custom"
LABEL maintainer="mail@gkanev.com"
LABEL version="1.2"
LABEL description="TensorFlow GPU image with additional tools for ML"

# Additional NVIDIA environment variables for better performance
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV TF_FORCE_GPU_ALLOW_GROWTH=true
ENV TF_XLA_FLAGS=--tf_xla_enable_xla_devices

# Set better defaults for TensorFlow performance
ENV TF_GPU_THREAD_MODE=gpu_private
ENV TF_GPU_THREAD_COUNT=1

# cuDNN configuration for better performance
ENV TF_CUDNN_RESET_RND_GEN_STATE=false
ENV TF_USE_CUDNN_AUTOTUNE=1

# Set memory allocation to avoid OOM errors
ENV TF_FORCE_UNIFIED_MEMORY=1

# Add CUDA Path environment variables (early setup)
ENV PATH="/usr/local/cuda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"

# Set a working directory
WORKDIR /app

# Install system dependencies for OpenCV and other packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/*

# Upgrade pip and uninstall opencv-python in one layer
RUN pip install --no-cache-dir --upgrade pip && \
    pip uninstall -y opencv-python

# Copy requirements and install Python packages
COPY requirements.txt /app/requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Create scripts directory and copy all scripts
RUN mkdir -p /app/scripts
COPY scripts/ /app/scripts/

# Set permissions for all scripts
RUN chmod +x /app/scripts/*.py

# Copy and setup entrypoint script
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]