# Use the official TensorFlow GPU image with a specific version 
FROM tensorflow/tensorflow:2.11.0-gpu-jupyter

# Set image metadata
LABEL name="tensorflow-gpu-custom" \
    maintainer="mail@gkanev.com" \
    version="1.1" \
    description="TensorFlow GPU image with additional tools for ML"

# Additional NVIDIA environment variables for better performance
ENV NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility \
    TF_FORCE_GPU_ALLOW_GROWTH=true \
    TF_XLA_FLAGS=--tf_xla_enable_xla_devices \
    TF_GPU_THREAD_MODE=gpu_private \
    TF_GPU_THREAD_COUNT=1 \
    TF_CUDNN_RESET_RND_GEN_STATE=false \
    TF_USE_CUDNN_AUTOTUNE=1 \
    TF_FORCE_UNIFIED_MEMORY=1 \
    PATH="/usr/local/cuda/bin:${PATH}" \
    LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"

# Set working directory
WORKDIR /app

# Install system dependencies in one layer with cleanup
RUN apt-get update && apt-get install -y --no-install-recommends \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Upgrade pip and handle opencv conflicts in one layer
RUN pip install --no-cache-dir --upgrade pip \
    && pip uninstall -y opencv-python

# Copy requirements and install packages in one optimized layer
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt \
    && pip cache purge \
    && find /usr/local/lib/python3.* -name __pycache__ -type d -exec rm -rf {} + 2>/dev/null || true

# Create scripts directory and copy scripts in one layer
COPY scripts/ ./scripts/
RUN chmod +x scripts/*.py

# Copy and setup entrypoint
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Remove unnecessary files to reduce image size
RUN apt-get autoremove -y \
    && rm -rf requirements.txt

ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]