# Use the official TensorFlow GPU image with a specific version 
FROM tensorflow/tensorflow:2.11.0-gpu-jupyter

# Set image metadata
LABEL name="tensorflow-gpu-custom"
LABEL maintainer="mail@gkanev.com"
LABEL version="1.2"
LABEL description="TensorFlow GPU image with additional tools for ML"

# Additional NVIDIA environment variables for better performance
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV TF_FORCE_GPU_ALLOW_GROWTH=true
ENV TF_XLA_FLAGS=--tf_xla_enable_xla_devices

# Set better defaults for TensorFlow performance
ENV TF_GPU_THREAD_MODE=gpu_private
ENV TF_GPU_THREAD_COUNT=1

# cuDNN configuration for better performance
ENV TF_CUDNN_RESET_RND_GEN_STATE=false
ENV TF_USE_CUDNN_AUTOTUNE=1

# Set memory allocation to avoid OOM errors
ENV TF_FORCE_UNIFIED_MEMORY=1

# Set a working directory
WORKDIR /app

# Install system dependencies including SSH server for PyCharm and tools for VS Code
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    curl \
    git \
    build-essential \
    openssh-server \
    python3-dev \
    python3-pip \
    python3-venv \
    sudo \
    # For VS Code Remote Development
    gnupg2 \
    lsb-release \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Configure SSH for PyCharm remote interpreter
RUN mkdir /var/run/sshd
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
RUN echo 'root:tfgpu' | chpasswd

# Create a non-root user for VS Code (recommended by VS Code)
RUN groupadd --gid 1000 vscode \
    && useradd --uid 1000 --gid 1000 -m vscode \
    && echo "vscode:vscode" | chpasswd \
    && usermod -aG sudo vscode \
    && echo "vscode ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/vscode

# Upgrade pip and install Python packages
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir \
    numpy \
    pandas \
    scikit-learn \
    matplotlib \
    h5py \
    ipykernel \
    pytest \
    pylint \
    debugpy \
    tqdm \
    jupyter \
    # VS Code Python extension dependencies
    pylint \
    autopep8 \
    black \
    yapf \
    mypy \
    pydocstyle \
    && find /usr/local/lib/python3.* -name __pycache__ -type d -exec rm -rf {} +

# Add CUDA Path environment variables
ENV PATH="/usr/local/cuda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"

# Copy benchmark and test scripts
COPY test_gpu.py /app/test_gpu.py
COPY tensorflow_pycharm_fix.py /app/tensorflow_pycharm_fix.py
COPY tf_benchmark.py /app/tf_benchmark.py
COPY check_gpu.py /app/check_gpu.py
COPY ide_setup.py /app/ide_setup.py
COPY .vscode /app/.vscode
RUN chmod +x /app/*.py

# Create directory for project mappings
RUN mkdir -p /app/projects
RUN chmod 777 /app/projects

# Create startup script that handles both SSH for PyCharm and VS Code
RUN echo '#!/bin/bash' > /entrypoint.sh && \
    echo 'if [ "$START_SSH" = "true" ]; then' >> /entrypoint.sh && \
    echo '  service ssh start' >> /entrypoint.sh && \
    echo '  echo "SSH server started for IDE integration"' >> /entrypoint.sh && \
    echo 'fi' >> /entrypoint.sh && \
    echo 'echo "====================================================="' >> /entrypoint.sh && \
    echo 'echo "TensorFlow GPU Container with IDE Integration"' >> /entrypoint.sh && \
    echo 'echo "====================================================="' >> /entrypoint.sh && \
    echo 'echo "To verify GPU access, run: python /app/check_gpu.py"' >> /entrypoint.sh && \
    echo 'echo "For IDE setup, run: python /app/ide_setup.py"' >> /entrypoint.sh && \
    echo 'echo "====================================================="' >> /entrypoint.sh && \
    echo 'exec "$@"' >> /entrypoint.sh && \
    chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]